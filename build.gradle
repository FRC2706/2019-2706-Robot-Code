plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id 'com.bmuschko.docker-remote-api' version '4.3.0'
}

def ROBOT_MAIN_CLASS = "ca.team2706.frc.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Maven central needed for JUnit
repositories {
    mavenCentral()
    jcenter()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.jmockit:jmockit:1.44"
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task pullImage(type: DockerPullImage) {
    repository = 'wpilib/roborio-cross-ubuntu'
    tag = '2019-18.04'
}

task createContainer(type: DockerCreateContainer) {
    dependsOn pullImage
    targetImageId pullImage.getImageId()
    portBindings = ['8080:8080']
    autoRemove = true
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId startContainer.getContainerId()
}

task integrationTest(type: Test) {
    description = 'Run automated testing using the wpilib docker'
    group = 'verification'
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    dependsOn startContainer
    finalizedBy stopContainer
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

test {
    testLogging {
        showStandardStreams = true
    }
    afterEvaluate {
        jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    }
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

wrapper {
    gradleVersion = '5.0'
}
